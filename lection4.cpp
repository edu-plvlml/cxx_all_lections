#include "lections.h"

#include <iostream>
using namespace std;

#include "class_unit.h"
typedef Unit U;

void lection4() {
  // Инициализация по умолчанию (default initialization)
  /* 1 */ U name1;
  /* 2 */ new U;
  /* 3 */ // базовый класс или поле-объект, не указанные в списке инициализации

  // Прямая инициализация (direct initialization)
  /* 1.2 */ U("U(\"\", 0, 0)", 0, 0);
  /* 1.2 */ U{"U{\"\", 0, 0}", 0, 0};
  /* 2.1 */ U name2("U name2(\"\", 0, 0)", 0, 0);
  /* 2.2 */ U name3{"U name3{\"\", 0, 0}", 0, 0};
  /* 3.1 */ new U("new U(\"\", 0, 0)", 0, 0);
  /* 3.2 */ new U{"new U{\"\", 0, 0}", 0, 0};
  /* 4 */ // базовый класс или поле-объект, указанные в списке инициализации
          // с непустыми круглыми или фигурными скобками
  
  // Инициализация значением (value initialization)
  /* 1.2 */ U();
  /* 1.2 */ U{};
  /* 2.1 */ // U name4(); // это объявление ФУНКЦИИ!
  /* 2.2 */ U name5{};
  /* 3.1 */ new U();
  /* 3.2 */ new U{};
  /* 4 */ // базовый класс или поле-объект, указанные в списке инициализации
          // с пустыми круглыми или фигурными скобками
  
  // Инициализация копии (copy initialization)
  /* 1 */ U copy1 = name1;
  /* 2.1 */ // передача объекта в функцию по значению
  /* 2.2 */ // возвращение объекта из функции
  /* 3.1 */ // генерация объекта-исключения
  /* 3.2 */ // перехват объекта-исключения по значению
  // При инициализации копии аргумент (name1) либо является типом U, либо приводится к нему,
  // после чего выполняется прямая инициализация.

  // Обратите внимание:
  /* 1.2 */ U copy2(name2); // прямая инициализация
  /* 1.3 */ U copy3{name3}; // прямая инициализация
  /* 2.1 */ // U(name2); // это ОПРЕДЕЛЕНИЕ ОБЪЕКТА!
  /* 2.2 */ U{name3}; // прямая инициализация
  /* 3.1 */ new U(name2); // прямая инициализация
  /* 3.2 */ new U{name3}; // прямая инициализация

  // Инициализация нулями (zero initialization)
  // происходит в момент запуска программы на этапе статической инициализации...
  /* 1.1 */ static U name6;
  /* 1.2 */ // static U name7(); // это объявление функции
  /* 1.3 */ static U name8{};
  /* 1.4 */ static U name9("static U name9(\"\", 0, 0)", 0, 0);
  /* 1.5 */ static U name10{"static U name10(\"\", 0, 0)", 0, 0};
  // ...а соответствующая определению инициализация происходит в процессе работы функции
  /* 2 */ // поле-переменная, не указанное в списке инициализации  
}

// Инициализация нулями (zero initialization)
// происходит в момент запуска программы на этапе статической инициализации...
/* 3.1 */ U name11;
/* 3.2 */ // U name12(); // это объявление функции
/* 3.3 */ U name13{};
/* 3.4 */ U name14("U name14(\"\", 0, 0)", 0, 0);
/* 3.5 */ U name15{"U name15(\"\", 0, 0)", 0, 0};
// ...и соответствующая определению инициализация происходит в процессе запуска программы
// на следующем этапе динамической инициализации, но может быть оптимизирована компилятором
// и происходить сразу на этапе статической инициализации, если это не влияет на результат
